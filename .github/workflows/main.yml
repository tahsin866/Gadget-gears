name: Deploy Laravel to cPanel

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    name: Deploy to cPanel
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, zip, gd
          coverage: none

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Composer dependencies
        run: composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist

      - name: Install NPM dependencies
        run: npm ci

      - name: Build frontend assets
        run: npm run build

      - name: Deploy to cPanel
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.PORT }}
          key: ${{ secrets.SSHKEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script_stop: true
          script: |
            echo "Starting deployment to cPanel..."

            DOMAIN_PATH="/home/${{ secrets.USERNAME }}/public_html"
            BACKUP_PATH="/home/${{ secrets.USERNAME }}/backups"

            # Create backup directory if not exists
            mkdir -p $BACKUP_PATH

            # Backup current deployment
            if [ -d "$DOMAIN_PATH" ]; then
              echo "Creating backup..."
              tar -czf "$BACKUP_PATH/backup_$(date +%Y%m%d_%H%M%S).tar.gz" -C "$DOMAIN_PATH" . 2>/dev/null || true
            fi

            cd $DOMAIN_PATH

            # Determine PHP version
            PHP_CMD="php"
            if command -v php82 >/dev/null 2>&1; then PHP_CMD="php82"; fi
            if command -v php81 >/dev/null 2>&1; then PHP_CMD="php81"; fi
            if command -v php80 >/dev/null 2>&1; then PHP_CMD="php80"; fi

            echo "Using PHP version:"
            $PHP_CMD -v

            # Determine Composer path dynamically
            if command -v composer >/dev/null 2>&1; then
              COMPOSER_CMD="composer"
            elif [ -f "/usr/bin/composer" ]; then
              COMPOSER_CMD="/usr/bin/composer"
            else
              echo "⚠️ Composer not found! Skipping PHP dependency installation."
              COMPOSER_CMD=""
            fi

            # Pull latest code
            echo "Pulling latest changes..."
            git fetch origin main
            git reset --hard origin/main

            # Composer install/update if composer exists
            if [ -n "$COMPOSER_CMD" ]; then
              echo "Installing Composer dependencies..."
              if ! $PHP_CMD $COMPOSER_CMD install --no-dev --optimize-autoloader --no-interaction; then
                echo "Composer install failed, trying update..."
                $PHP_CMD $COMPOSER_CMD update --no-dev --optimize-autoloader --no-interaction || {
                    echo "Reinstalling vendor..."
                    rm -rf vendor
                    $PHP_CMD $COMPOSER_CMD install --no-dev --optimize-autoloader --no-interaction
                }
              fi
            fi

            # NPM install & build
            echo "Building frontend assets..."
            if command -v npm >/dev/null 2>&1; then
                npm ci --production
                npm run build
            else
                echo "NPM not found, skipping frontend build"
            fi

            # Set file permissions
            echo "Setting permissions..."
            find storage -type f -exec chmod 644 {} \; 2>/dev/null || true
            find storage -type d -exec chmod 755 {} \; 2>/dev/null || true
            find bootstrap/cache -type f -exec chmod 644 {} \; 2>/dev/null || true
            find bootstrap/cache -type d -exec chmod 755 {} \; 2>/dev/null || true

            # Create symbolic link
            if [ ! -L "public/storage" ]; then
              echo "Creating storage symlink..."
              ln -sf ../storage/app/public public/storage
            fi

            # Clear caches
            echo "Clearing Laravel caches..."
            $PHP_CMD artisan config:clear 2>/dev/null || true
            $PHP_CMD artisan cache:clear 2>/dev/null || true
            $PHP_CMD artisan route:clear 2>/dev/null || true
            $PHP_CMD artisan view:clear 2>/dev/null || true

            # Cache for production
            echo "Caching for production..."
            $PHP_CMD artisan config:cache 2>/dev/null || true
            $PHP_CMD artisan route:cache 2>/dev/null || true
            $PHP_CMD artisan view:cache 2>/dev/null || true

            # Optimize
            $PHP_CMD artisan optimize 2>/dev/null || true

            echo "✅ Deployment completed successfully!"

      - name: Deployment Status
        if: success()
        run: echo "✅ Deployment to cPanel completed successfully!"

      - name: Deployment Failed
        if: failure()
        run: echo "❌ Deployment failed! Please check the logs."
